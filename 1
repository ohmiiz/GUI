import cv2
from tkinter import *
from PIL import ImageTk,Image
from tkinter import messagebox
from tkinter import filedialog
import sys
import math
from math import *
import numpy as np
import cv2.aruco as aruco
import time

#Set up GUI
#Makes main window
gui=Tk()
gui.title("UI Test")
#gui.config()
#Graphics window
imageFrame = Frame(gui, width=200, height=100)
imageFrame.grid(row=0, column=1, padx=10, pady=2)
#define frame rate limit
frame_rate = 10

#define size of ArUco
markerLength = 0.2 #m

#for track from camera calibration
matrix_coefficients = [[394.25885619, 0.00000000e+00, 176.79297187, ],  # From calibrte camera
                       [0.00000000e+00, 394.43979784, 228.18139903, ],
                       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
distortion_coefficients = [[4.26629830e-01, -3.32281005e+00, -6.00006033e-04, -3.28199014e-03, 8.39347057e+00]]  # From calibrte camera
#Capture video frames

cap = cv2.VideoCapture(0)

def show_frame():
    global frame
    data_tvecs = []  # Prepare to add tvec
    value_dis = []  # Prepare to get result distance(scalar) unit meter
    value_blow = []
    sum_tvec = 0
    tvec_ini = np.array([0, 0, 0])
    tvec = np.array([0, 0, 0])
    dist = 0
    prev = 0
    blow = 0.00
    print('check markerLengt', markerLength)

    while cap.isOpened():
        # convert image to gray scale image
        # Capture frame-by-frame
        time_elapsed = time.time() - prev
        ret, frame = cap.read()
        if not ret:
            continue

        if time_elapsed > 1. / frame_rate:
            prev = time.time()
            # frame = cv2.resize(frame, (4000, 5000))
            # frame=cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
            gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Change grayscale
            aruco_dict = aruco.Dictionary_get(aruco.DICT_5X5_250)  # Use 5x5 dictionary to find markers
            parameters = aruco.DetectorParameters_create()  # Marker detection parameters
            # lists of ids and the corners beloning to each id
            corners, ids, rejected_img_points = aruco.detectMarkers(gray, aruco_dict,
                                                                    parameters=parameters,
                                                                    cameraMatrix=np.float32(matrix_coefficients),
                                                                    distCoeff=np.float32(distortion_coefficients))
            # calculate(ids,corners,matrix_coefficients,distortion_coefficients,frame)
            if np.all(ids is not None):  # If there are markers found by detector
                for i in range(0, len(ids)):  # Iterate in markers
                    # Estimate pose of each marker and return the values rvec and tvec---different from camera coefficients
                    rvec, tvec, markerPoints = aruco.estimatePoseSingleMarkers(corners[i], markerLength,
                                                                               np.float32(matrix_coefficients),
                                                                               np.float32(distortion_coefficients))

                    (rvec - tvec).any()  # get rid of that nasty numpy value array error
                    aruco.drawDetectedMarkers(frame, corners)  # Draw A square around the markers
                    # aruco.drawAxis(frame, np.float32(matrix_coefficients), np.float32(distortion_coefficients),np.float32(rvec), np.float32(tvec), 0.01)  # Draw Axis

                    data_tvecs.append(tvec)  # get every data of tvec in array data_tvecs
                    length = len(data_tvecs)  # For easy to calculate equation
                    if length > 1:
                        diff = data_tvecs[length - 1] - tvec_ini  # Find distance between tvec(vector)
                        sum_tvec = sqrt(np.sum(diff ** 2))  # convert vector to scalar
                        dist = sum_tvec
                        value_dis.append(np.round(sum_tvec, 4))  # get the distance data(scalar)  in array value
                    # calculate move per blow
                    length = len(value_dis)
                    if length > 10:
                        pile_drive = []
                        x = 0
                        for x in range(5):
                            pile_drive.append(value_dis[length - x - 1])
                        if np.std(pile_drive) > .005:
                            blow = float(np.average(pile_drive)) - float(blow)
                            value_blow.append(blow)
            if len(corners) > 0:
                # flatten the ArUco IDs list
                ids = ids.flatten()
                # loop over the detected ArUCo corners
                for (markerCorner, markerID) in zip(corners, ids):
                    # extract the marker corners (which are always returned in
                    # top-left, top-right, bottom-right, and bottom-left order)
                    find_center = corners.copy()
                    find_center = markerCorner.reshape((4, 2))
                    (topLeft, topRight, bottomRight, bottomLeft) = find_center
                    # convert each of the (x, y)-coordinate pairs to integers
                    topRight = (int(topRight[0]), int(topRight[1]))
                    bottomRight = (int(bottomRight[0]), int(bottomRight[1]))
                    bottomLeft = (int(bottomLeft[0]), int(bottomLeft[1]))
                    topLeft = (int(topLeft[0]), int(topLeft[1]))
                    # draw the bounding box of the ArUCo detection
                    # cv2.line(frame, topLeft, topRight, (0, 255, 0), 2)
                    # cv2.line(frame, topRight, bottomRight, (0, 255, 0), 2)
                    # cv2.line(frame, bottomRight, bottomLeft, (0, 255, 0), 2)
                    # cv2.line(frame, bottomLeft, topLeft, (0, 255, 0), 2)
                    # compute and draw the center (x, y)-coordinates of the ArUco
                    # marker
                    cX = int((topLeft[0] + bottomRight[0]) / 2.0)
                    cY = int((topLeft[1] + bottomRight[1]) / 2.0)
                    cv2.circle(frame, (cX, cY), 4, (0, 0, 255), -1)
                    # draw the ArUco marker ID on the image
                    cv2.putText(frame, str(markerID),
                                (topLeft[0], topLeft[1] - 15), cv2.FONT_HERSHEY_SIMPLEX,
                                0.5, (0, 255, 0), 2)
                    cv2.putText(frame, str(topRight),
                                (topRight[0], topRight[1] - 15), cv2.FONT_HERSHEY_SIMPLEX,
                                0.5, (0, 255, 0), 2)

                    # cv2.circle(frame, (cX_ini, cY_ini), 4, (0, 255, 0), -1 )
            fps = 1 / time_elapsed
            fps = np.round(fps, 5)
            cv2.putText(frame, str(fps),
                        (50, 75), cv2.FONT_HERSHEY_SIMPLEX,
                        0.5, (0, 255, 0), 2)
            #data_value_dis = pd.DataFrame(value_dis, columns=['real Distance'])
            #data_blow = pd.DataFrame(value_blow, columns=['avg blow'])
    return

    frame = cv2.flip(frame, 1)
    img = Image.fromarray(frame)
    imgtk = ImageTk.PhotoImage(image=img)
    display1.imgtk = imgtk #Shows frame for display 1
    display1.configure(image=imgtk)
    gui.after(10, show_frame)
def fquit(event):
    #Dialog Box
    answer=messagebox.askyesno(title='eiei',message="u want to quit?")
    if answer>0:
        sys.exit()

def fopenfile(event):
    file = filedialog.askopenfile(mode='r', filetypes=[('Python Files', '*.py')])
    if file is not None:
        content = file.read()
        print(content)


display1 = Label(imageFrame)
display1.grid(row=0, column=1, padx=10, pady=2)  #Display 1

#Slider window (slider controls stage position)
#sliderFrame = Frame(gui, width=600, height=100)
#sliderFrame.grid(row = 1, column=1, padx=10, pady=2)


#
#openfileB=Button(text="open file",padx=7.5,pady=10,fg="blue")
#openfileB.bind('<Button-1>',fopenfile)
#openfileB.grid(row=1,column=2)
#
recordB=Button(text="record",padx=7.5,pady=10,fg="blue")
recordB.grid(row=1,column=1)
#
quitB=Button(text="quit",padx=7.5,pady=10,fg="red")
quitB.bind('<Button-1>',fquit)
quitB.grid(row=1,column=3)
#
resetB=Button(text="reset",padx=7.5,pady=10,fg="blue")
resetB.grid(row=1,column=2)
#menu
menubar=Menu(gui)
fileMenu=Menu(menubar, tearoff=0)
fileMenu.add_command(label="New")
fileMenu.add_command(label="Open")
fileMenu.add_command(label="Save")
menubar.add_cascade(label="File",menu=fileMenu)

helpMenu=Menu(menubar, tearoff=0)
helpMenu.add_command(label="Contact")
helpMenu.add_command(label="How to use")
helpMenu.add_command(label="Document")
menubar.add_cascade(label="Help",menu=helpMenu)
gui.config(menu=menubar)

show_frame() #Display
gui.mainloop()  #Starts GUI
